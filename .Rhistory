rdbwselect(y=rd.data$y, x=rd.data$x, c=7, all=TRUE)
?rdrobust
library(rdrobust)
pre <- read.csv("./9.2/CS112_9_1_x_i.csv")$x
# post.control <- read.csv("./9.2/CS112_9_1_y_i_0.csv")$x
# post.treat <- read.csv("./9.2/CS112_9_1_y_i_1.csv")$x
post <- read.csv('./9.2/CS112_9_1_y_i.csv')$x
rd.data <- data.frame(x=pre, y=post)
rdplot(y=rd.data$y, x=rd.data$x, c=7)
rdrobust(y=rd.data$y, x=rd.data$x, c=7, all=TRUE)
rdbwselect(y=rd.data$y, x=rd.data$x, c=7, all=TRUE)
rdbwselect(y=rd.data$y, x=rd.data$x, c=7) #, all=TRUE)
?rdbwselect
bw <- rdbwselect(y=rd.data$y, x=rd.data$x, c=7, all=TRUE)
bw$bws
rdrobust(y=rd.data$y, x=rd.data$x, c=7, all=TRUE)
rdrobust(data$y.after, data$y.before, c = cutoff)
set.seed(333)
rdrobust(data$y.after, data$y.before, c = cutoff)
set.seed(33333)
rdrobust(data$y.after, data$y.before, c = cutoff)
rdrobust(data$y.after, data$y.before, all = TRUE)
rdrobust(data$y.after, data$y.before, c = cutoff, all = TRUE)
rdplot(data$y.after, data$y.before, c = cutoff, title = "Without Covariates")
rdplot(data$y.after, data$y.before, c = cutoff, cov=cbind(cholesterol,age,weight,height,married), title = "With Covariates")
rdrobust(data$y.after, data$y.before, c = cutoff, cov=cbind(cholesterol,age,weight,height,married), all = TRUE)
library(rdrobust)
?rdplot
data[data$y.before > cutoff,'y.after'] = data[data$y.before > cutoff,'y.after'] - 0.1
size <- 200
cutoff <- 0.666
cholesterol <- rnorm(size, 175, 50)
age <- rnorm(size, 65, 7.5)
weight <- rnorm(size, 80, 10)
height <- rnorm(size, 175, 15)
married <- rbinom(size, 1, 0.5)
data <- data.frame(cholesterol=cholesterol, age=age, weight=weight, height=height, married=married)
max_c <- max(data$cholesterol)
max_weight <- max(data$weight)
data$y.before <- data$cholesterol/max_c * 0.4 + data$weight / max_weight * 0.4 + runif(size, 0, 0.2) - 0.05 * data$married
data$y.after <- data$y.before + runif(size, -0.1, 0.1)
data[data$y.before > cutoff,'y.after'] = data[data$y.before > cutoff,'y.after'] - 0.1
qplot(data$y.before, data$y.after)
write.csv(data, file="9.1/data_upgraded.csv")
library(rdrobust)
rdrobust(data$y.after, data$y.before, c = cutoff, cov=cbind(cholesterol,age,weight,height,married), all = TRUE)
rdplot(data$y.after, data$y.before, c = cutoff, title = "Without Covariates")
rdplot(data$y.after, data$y.before, c = cutoff , title = "With Covariates")
library("ggplot2")
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,]) + #, method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,]) #, method='lm')
?geom_smooth
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,]) + #, method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,]) #, method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = "dash") +
geom_vline(xintercept = cutoff + 0.1, linetype = "dash") +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = "e") +
geom_vline(xintercept = cutoff + 0.1, linetype = "e") +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = "2") +
geom_vline(xintercept = cutoff + 0.1, linetype = "2") +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = 2) +
geom_vline(xintercept = cutoff + 0.1, linetype = 2) +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = 4) +
geom_vline(xintercept = cutoff + 0.1, linetype = 4) +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = 8) +
geom_vline(xintercept = cutoff + 0.1, linetype = 8) +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.1, linetype = 8) +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.1, linetype = 8, colour = 'blue') +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
rdrobust(data$y.after, data$y.before, c = cutoff)
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.0427, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.0427, linetype = 8, colour = 'blue') +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.0427, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.0427, linetype = 8, colour = 'blue') +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[cutoff - 0.0427 <= data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[cutoff + 0.0427 > data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.0427, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.0427, linetype = 8, colour = 'blue') +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[cutoff - 0.0427 <= data$y.before && data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[cutoff + 0.0427 > data$y.before && data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.0427, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.0427, linetype = 8, colour = 'blue') +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
?rdrobust
data(lalonde)
data(lalonde)
library(Matching)
data(lalonde)
View(lalonde)
?Match
model <- glm(treat~age + I(age^2) + educ + I(educ^2) + black +
hisp + married + nodegr + re74  + I(re74^2) + re75 + I(re75^2) +
u74 + u75, data=lalonde, family='binomial')
summary(model)
predict(model, lalonde)
predict(model, lalonde, type = 'response')
library(Matching)
data(lalonde)
model <- glm(treat~age + I(age^2) + educ + I(educ^2) + black +
hisp + married + nodegr + re74  + I(re74^2) + re75 + I(re75^2) +
u74 + u75, data=lalonde, family='binomial')
summary(model)
predict(model, lalonde, type = 'response')
ggplot(data=colette.df) + geom_text(aes(x=Age, y=Edu, colour=Treat, label=GenderName))
library(ggplot2)
library(foreign)
load("~/projects/r/11.2/haha.RData")
haha.df <- data.frame(pre=pre.test, post=post.test, treat=treatment)
qplot(x=haha.df$pre, y=haha.df$post, colour=haha.df$treat)
colette.df <- read.csv("./11.2/problem_data.csv")
colette.df$GenderName <- 'M'
colette.df[colette.df$Gender ==1,'GenderName'] = 'F'
ggplot(data=colette.df) + geom_text(aes(x=Age, y=Edu, colour=Treat, label=GenderName))
fat.cats.df <- read.csv("./11.1/fat_cats_test_set.csv")
true.outcome <- fat.cats.df$height / 10 + fat.cats.df$length / 10 + 2 * fat.cats.df$genetics - 1.5 * (fat.cats.df$treatment * fat.cats.df$gender + 2 * fat.cats.df$treatment * (1 - fat.cats.df$gender))
errors <- fat.cats.df$outcome - true.outcome
rss <- sum(errors ^ 2)
rse <- (rss / nrow(fat.cats.df)) ^ 0.5
tss <- sum((fat.cats.df$outcome - mean(fat.cats.df$outcome))^2)
r.squared <- 1 - rss/tss
View(colette.df)
colette.model <- glm(Edu~Age + Gender + Treat, data=colette.df, family='linear')
?glm
colette.model <- lm(Edu~Age + Gender + Treat, data=colette.df)
summary(colette.model)
View(fat.cats)
fat.cats.df <- read.csv("./11.1/fat_cats_test_set.csv")
View(fat.cats)
View(fat.cats.df)
model = lm(outcome~height + length + genetics + gender + treatment + gender * treatment ,data=fat.cats.df)
summary(model)
model = lm(outcome~height + length + genetics + gender + treatment, data=fat.cats.df)
summary(model)
fat.cats.df <- read.csv("./11.1/fat_cats_test_set.csv")
model = lm(outcome~height + length + genetics + gender + treatment
+ height * length, gender * genetics, gender * treatment, data=fat.cats.df)
summary(model)
fat.cats.df <- read.csv("./11.1/fat_cats_test_set.csv")
model = lm(outcome~height + length + genetics + gender + treatment +
height * length, gender * genetics, gender * treatment, data=fat.cats.df)
summary(model)
model = lm(outcome~height + length + genetics + gender + treatment +
height * length + gender * genetics + gender * treatment, data=fat.cats.df)
summary(model)
fat.cats$black = fat.cats.df$color == 'Black'
fat.cats.df$black = fat.cats.df$color == 'Black'
fat.cats.df$albino = fat.cats.df$color == 'Albino'
fat.cats.df$black = fat.cats.df$color == 'Black'
fat.cats.df$gray = fat.cats.df$color == 'Gray'
fat.cats.df$ginger = fat.cats.df$color == 'Ginger'
fat.cats.df$albino = fat.cats.df$color == 'Albino'
model = lm(outcome~height + length + genetics + gender + treatment +
height * length + gender * genetics + gender * treatment +
black + gray + ginger + albino, data=fat.cats.df)
summary(model)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
q
library("Matching")
library("rgenoud")
library("rbounds")
library("plyr")
library("ggplot2")
library("foreign")
library("GGally")
library("reshape2")
library("gridExtra")
set.seed(33)
ESTIMAND = "ATC"
basic.df <- read.dta("./daughter_effect/dataverse_files/basic.dta")
sample.df <- basic.df[!is.na(basic.df$anygirls),] # remove any rows in which the treatment variable is NA
sample.df <- sample.df[!is.na(sample.df$nowtot),] # remove rows in which the outcome variable is NA
sample.df <- sample.df[sample.df$year=='1997-1998',] # keep only the 105th congress, as King did
sample.df$rgroup.factor = as.factor(sample.df$rgroup)
sample.df <- cbind(sample.df, model.matrix(~ rgroup.factor - 1, data=sample.df)) # bind the individual factors as columns as well
# sample.df <- sample.df[,c(7:12, 16:38,41)] # removing unnecesary columns for this analysis
table(sample.df$anygirls)
sample.df <- na.omit(sample.df)
# omitting rows with any NAs loses 6 control and 27 treatment elements
# unfortunate, but not tragic, as we already have way more treatment than control elements.
table(sample.df$anygirls)
attach(sample.df)
# Covariate elaboration:
# rgroup: religious group, repub: is republican, srvlng: # of years of veterancy in the house of reps,
# demvote: democratic vote share in most recent presidential election (1996), medinc: median income in district
# perf/w/hs/col/ur: proportion female (voting age) / white (voting age) / high school graduate (25+) / college graduate (25+) / urban in the district
# drXper: percent christian / catholic / mormon or jehovahs / other / no religion in the state
# alabort/moreserv/moredef/morecrimesp/protgay: stances on different issues in the state
# statabb: state code, statalph: state number code, region: state district #
# aauw / rtl: scores assigned by different organization
sample.balance.subset = cbind(#rgroup.factor0, rgroup.factor1, rgroup.factor2, rgroup.factor3, rgroup.factor4,
repub, srvlng, female, white, age, surgroup.factor,
# demvote, medinc,
# perf, perw, perhs, percol, perur, alabort, moreserv, moredef, morecrimesp, protgay,
# dr1per, dr2per, dr3per, dr4per, dr5per,
I(age ^ 2), I(srvlng ^ 2), I(age * srvlng))
sample.balance.subset
type(sample.balance.subset)
class(sample.balance.subset)
?match
?Match
library(Matching)
?Match
?GenMatch
library(Synth)
library(ggplot2)
library(xtable)
library(Synth)
library(ggplot2)
library(xtable)
data("basque")
library(Synth)
library(Synth)
library(ggplot2)
galaxy.data.df <- read.csv("~/Documents/NS111/1.2/galaxy_data.csv")
View(galaxy.data.df)
qplot(x = galaxy.data.df$Distance...millions.of.light.years., y = galaxy.data.df$Recession.Velocity...km.s.)
colnames(galaxy.data.df) <- c("id", "distance", "velocity", "constellation")
ggplot(data=galaxy.data.df) + geom_point(aes(x=distance, y=velocity))
ggplot(data=galaxy.data.df) + geom_point(aes(x=distance, y=velocity)) +
xlab("Distance (milliions of light years)") + ylab("Recession Velocity (km/s)") +
ggtitle("Hubble Diagram")
ggplot(data=galaxy.data.df) + geom_point(aes(x=distance, y=velocity)) +
xlab("Distance (milliions of light years)") + ylab("Recession Velocity (km/s)") +
ggtitle("Hubble Diagram") + geom_smooth(method = "lm")
ggplot(data=galaxy.data.df, mapping = aes(x=distance, y=velocity)) + geom_point() +
xlab("Distance (milliions of light years)") + ylab("Recession Velocity (km/s)") +
ggtitle("Hubble Diagram") + geom_smooth(method = "lm")
lm(velocity ~ distance, data = galaxy.data.df)
glm(velocity ~ distance, data = galaxy.data.df, method = 'linear')
glm(velocity ~ distance, data = galaxy.data.df, method = 'lm')
glm(velocity ~ distance, data = galaxy.data.df)
ggplot(data=galaxy.data.df, mapping = aes(x=distance, y=velocity)) + geom_point() +
scale_x_log10() + scale_y_log10() +
xlab("Distance (milliions of light years)") + ylab("Recession Velocity (km/s)") +
ggtitle("Hubble Diagram") + geom_smooth(method = "lm")
ggplot(data=galaxy.data.df, mapping = aes(x=distance, y=velocity)) + geom_point() +
xlab("Distance (milliions of light years)") + ylab("Recession Velocity (km/s)") +
ggtitle("Hubble Diagram") + geom_smooth(method = "lm")
install.packages("pitchrx")
install.packages("pitchRx")
install.packages("RMySQL")
library(pitchRx)
library(RMySQL)
library(pitchRx)
library(RMySQL)
db <- dbConnect(MySQL(), user='root', password='root', dbname='pitchfx', host='localhost')
db
dbListTables(db)
?scrape
?db
db
scrape(start='2016-01-01', end='2016-05-01', connect=db)
sessionInfo()
?LC_TIME
library(pitchRx)
library(RMySQL)
Sys.setenv(TZ='EST')
db <- dbConnect(MySQL(), user='root', password='root', dbname='scraped_pitchfx', host='localhost')
# files <- c("inning/inning_all.xml", "inning/inning_hit.xml", "miniscoreboard.xml", "players.xml")
# scrape(start='2013-01-01', end='2013-06-01', suffix=files, connect=db)
update_db(db, end="2017-01-01")
library(ggplot2)
library(foreign)
load("~/projects/r/11.2/haha.RData")
haha.df <- data.frame(pre=pre.test, post=post.test, treat=treatment)
qplot(x=haha.df$pre, y=haha.df$post, colour=haha.df$treat)
colette.df <- read.csv("./11.2/problem_data.csv")
colette.df$GenderName <- 'M'
colette.df[colette.df$Gender ==1,'GenderName'] = 'F'
ggplot(data=colette.df) + geom_text(aes(x=Age, y=Edu, colour=Treat, label=GenderName))
colette.model <- lm(Edu~Age + Gender + Treat, data=colette.df)
summary(colette.model)
fat.cats.df <- read.csv("./11.1/fat_cats_test_set.csv")
model = lm(outcome~height + length + genetics + gender + treatment +
height * length + gender * genetics + gender * treatment, data=fat.cats.df)
summary(model)
true.outcome <- fat.cats.df$height / 10 + fat.cats.df$length / 10 + 2 * fat.cats.df$genetics - 1.5 * (fat.cats.df$treatment * fat.cats.df$gender + 2 * fat.cats.df$treatment * (1 - fat.cats.df$gender))
fat.cats.df$black = fat.cats.df$color == 'Black'
fat.cats.df$gray = fat.cats.df$color == 'Gray'
fat.cats.df$ginger = fat.cats.df$color == 'Ginger'
fat.cats.df$albino = fat.cats.df$color == 'Albino'
model = lm(outcome~height + length + genetics + gender + treatment +
height * length + gender * genetics + gender * treatment +
black + gray + ginger + albino, data=fat.cats.df)
summary(model)
errors <- fat.cats.df$outcome - true.outcome
rss <- sum(errors ^ 2)
rse <- (rss / nrow(fat.cats.df)) ^ 0.5
tss <- sum((fat.cats.df$outcome - mean(fat.cats.df$outcome))^2)
r.squared <- 1 - rss/tss
view(basque)
basque
View(basic.df)
View(basic.df)
View(basque)
View(basque)
basque$Treatment = 0
for (i in basque$regionno) {
current_group <- basque[basque$regionno == i,]
dim(current_group)
}
for (i in basque$regionno) {
current_group <- basque[basque$regionno == i,]
print(dim(current_group))
}
print(i)
for (i in basque$regionno) {
print(i)
current_group <- basque[basque$regionno == i,]
print(dim(current_group))
}
range(basque$regionno)
for (i in range(basque$regionno)) {
print(i)
current_group <- basque[basque$regionno == i,]
print(dim(current_group))
}
(start, stop) <- range(basque$regionno)
for (i in start:stop) {
print(i)
current_group <- basque[basque$regionno == i,]
print(dim(current_group))
}
range(basque$regionno)
range(basque$regionno)[0]
range(basque$regionno)[1]
regionno_range <- range(basque$regionno)
for (i in regionno_range[1]:regionno_range[2]) {
print(i)
current_group <- basque[basque$regionno == i,]
print(dim(current_group))
}
regionno_range <- range(basque$regionno)
for (i in regionno_range[1]:regionno_range[2]) {
current_group <- basque[basque$regionno == i,]
print(nrow(current_group))
}
regionno_range <- range(basque$regionno)
for (i in regionno_range[1]:regionno_range[2]) {
current_group <- basque[basque$regionno == i,]
group_sample <- sample(nrow(current_group),size = (nrow(current_group)/2),replace=FALSE)
print(nrow(current_group), group_sample)
}
regionno_range <- range(basque$regionno)
for (i in regionno_range[1]:regionno_range[2]) {
current_group <- basque[basque$regionno == i,]
group_sample <- sample(nrow(current_group),size = (nrow(current_group)/2),replace=FALSE)
print(nrow(current_group))
print(group_sample)
}
regionno_range <- range(basque$regionno)
for (i in regionno_range[1]:regionno_range[2]) {
current_group <- basque[basque$regionno == i,]
group_sample <- sample(nrow(current_group),size <- (nrow(current_group)/2),replace=FALSE)
current_group[group_sample,'Treatment'] <- 1
}
regionno_range <- range(basque$regionno)
for (i in regionno_range[1]:regionno_range[2]) {
current_group_indices <- which(basque$regionno == i)
print(current_group_indices)
# group_sample <- sample(nrow(current_group),size <- (nrow(current_group)/2),replace=FALSE)
# current_group[group_sample,'Treatment'] <- 1
}
regionno_range <- range(basque$regionno)
for (i in regionno_range[1]:regionno_range[2]) {
current_group_indices <- which(basque$regionno == i)
print(current_group_indices)
group_sample <- sample(current_group_indices ,size <- (nrow(current_group_indices)/2),replace=FALSE)
current_group[group_sample,'Treatment'] <- 1
}
regionno_range <- range(basque$regionno)
for (i in regionno_range[1]:regionno_range[2]) {
current_group_indices <- which(basque$regionno == i)
print(nrow(current_group_indices)/2)
group_sample <- sample(current_group_indices, size=nrow(current_group_indices)/2, replace=FALSE)
current_group[group_sample,'Treatment'] <- 1
}
regionno_range <- range(basque$regionno)
for (i in regionno_range[1]:regionno_range[2]) {
current_group_indices <- which(basque$regionno == i)
print(length(current_group_indices)/2)
group_sample <- sample(current_group_indices, size=nrow(current_group_indices)/2, replace=FALSE)
current_group[group_sample,'Treatment'] <- 1
}
regionno_range <- range(basque$regionno)
for (i in regionno_range[1]:regionno_range[2]) {
current_group_indices <- which(basque$regionno == i)
treatment_size <- round(length(current_group_indices) / 2)
group_sample <- sample(current_group_indices, size=treatment_size, replace=FALSE)
current_group[group_sample,'Treatment'] <- 1
}
regionno_range <- range(basque$regionno)
for (i in regionno_range[1]:regionno_range[2]) {
current_group_indices <- which(basque$regionno == i)
treatment_size <- round(length(current_group_indices) / 2)
group_sample <- sample(current_group_indices, size=treatment_size, replace=FALSE)
basque[group_sample,'Treatment'] <- 1
}
basque$Treatment <- 0
for (i in unique(basque$regionno)) {
current_group_indices <- which(basque$regionno == i)
treatment_size <- round(length(current_group_indices) / 2)
group_sample <- sample(current_group_indices, size=treatment_size, replace=FALSE)
basque[group_sample,'Treatment'] <- 1
}
