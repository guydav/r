library(foreign)
library(MASS)
library(caret)
library(WhatIf)
library(reshape)
setwd('~/projects/r/un_policy/')
seed <- 33
set.seed(seed)
peace.df <- read.dta('./replication_data/peace.dta')
minimal.cols <- c("decade", "wardur", "wartype", "un2int", "nouncint", "peaceop",
"interven", "major", "gdpcap", "area",
"factnum", "factnum2", "logcost", "trnsfcap",
"develop", "exp", "treaty", "pbs2s3")
peace.df.minimal.raw <- peace.df[,minimal.cols]
peace.df.minimal.raw <- na.omit(peace.df.minimal.raw)
peace.df.minimal <- peace.df.minimal.raw
peace.df.minimal$pbs2s3 <- factor(peace.df.minimal$pbs2s3, labels=make.names(c(0, 1)))
# Split the data into training and test sets
set.seed(seed)
train.indices <- createDataPartition(y=peace.df.minimal$pbs2s3,
p=0.66,
list=FALSE)
minimal.train <- peace.df.minimal[train.indices,]
minimal.test <- peace.df.minimal[-train.indices,]
minimal.raw.train <- peace.df.minimal.raw[train.indices,]
minimal.raw.test <- peace.df.minimal.raw[-train.indices,]
# Now let's try automating this with caret
set.seed(seed)
minimal.control <- trainControl(method="repeatedcv", number=10, repeats=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
# This uses binomial by itself, as the output variable is a two-valued factor
minimal.caret.logit <- train(pbs2s3 ~ un2int - pbs2s3 + . + .*.,
data=minimal.train, method="glmStepAIC",
trControl = minimal.control, metric = "ROC",
preProcess = c('center', 'scale'),
scope=list(upper="pbs2s3 ~ un2int - pbs2s3 + . + .*.",
lower="pbs2s3 ~ un2int"))
minimal.control <- trainControl(method="repeatedcv", number=10, repeats=1, #3,
summaryFunction = twoClassSummary, classProbs = TRUE)
# This uses binomial by itself, as the output variable is a two-valued factor
minimal.caret.logit <- train(pbs2s3 ~ un2int - pbs2s3 + . + .*.,
data=minimal.train, method="glmStepAIC",
trControl = minimal.control, metric = "ROC",
preProcess = c('center', 'scale'),
scope=list(upper="pbs2s3 ~ un2int - pbs2s3 + . + .*.",
lower="pbs2s3 ~ un2int"))
summary(minimal.caret.logit)
minimal.control <- trainControl(method="repeatedcv", number=10, repeats=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
# rf.tune.grid <- expand.grid(mtry=c(1:(ncol(peace.df.minimal) - 1)))
minimal.caret.rf <- train(pbs2s3 ~ un2int + . + . * . - pbs2s3, data=minimal.train, method="rf",
trControl = minimal.control, preProcess = c('center', 'scale'),
# tuneGrid = rf.tune.grid,
metric = "ROC", verbose = TRUE)
plot(minimal.caret.rf)
importance(minimal.caret.rf$finalModel, type=2)
importance(minimal.caret.rf$finalModel, type=1)
importance(minimal.caret.rf$finalModel, type=2)
