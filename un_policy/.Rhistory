geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = 2) +
geom_vline(xintercept = cutoff + 0.1, linetype = 2) +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = 4) +
geom_vline(xintercept = cutoff + 0.1, linetype = 4) +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = 8) +
geom_vline(xintercept = cutoff + 0.1, linetype = 8) +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.1, linetype = 8) +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.1, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.1, linetype = 8, colour = 'blue') +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
rdrobust(data$y.after, data$y.before, c = cutoff)
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.0427, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.0427, linetype = 8, colour = 'blue') +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.0427, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.0427, linetype = 8, colour = 'blue') +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[cutoff - 0.0427 <= data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[cutoff + 0.0427 > data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.0427, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.0427, linetype = 8, colour = 'blue') +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[cutoff - 0.0427 <= data$y.before && data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[cutoff + 0.0427 > data$y.before && data$y.before > cutoff,], method='lm')
ggplot(data=data, aes(x=y.before, y=y.after)) + geom_point() +
geom_vline(xintercept = cutoff, linetype = "longdash") +
geom_vline(xintercept = cutoff - 0.0427, linetype = 8, colour = 'blue') +
geom_vline(xintercept = cutoff + 0.0427, linetype = 8, colour = 'blue') +
xlab("Predicted Pre-Treatment Mortality Rate") +
ylab("Predicted Post-Treatment Mortality Rate") +
ggtitle("Regression Discontinuity Design Graph") +
geom_smooth(data=data[data$y.before <= cutoff,], method = 'lm') +
geom_smooth(data=data[data$y.before > cutoff,], method='lm')
?rdrobust
data(lalonde)
data(lalonde)
library(Matching)
data(lalonde)
View(lalonde)
?Match
model <- glm(treat~age + I(age^2) + educ + I(educ^2) + black +
hisp + married + nodegr + re74  + I(re74^2) + re75 + I(re75^2) +
u74 + u75, data=lalonde, family='binomial')
summary(model)
predict(model, lalonde)
predict(model, lalonde, type = 'response')
library(Matching)
data(lalonde)
model <- glm(treat~age + I(age^2) + educ + I(educ^2) + black +
hisp + married + nodegr + re74  + I(re74^2) + re75 + I(re75^2) +
u74 + u75, data=lalonde, family='binomial')
summary(model)
predict(model, lalonde, type = 'response')
ggplot(data=colette.df) + geom_text(aes(x=Age, y=Edu, colour=Treat, label=GenderName))
library(ggplot2)
library(foreign)
load("~/projects/r/11.2/haha.RData")
haha.df <- data.frame(pre=pre.test, post=post.test, treat=treatment)
qplot(x=haha.df$pre, y=haha.df$post, colour=haha.df$treat)
colette.df <- read.csv("./11.2/problem_data.csv")
colette.df$GenderName <- 'M'
colette.df[colette.df$Gender ==1,'GenderName'] = 'F'
ggplot(data=colette.df) + geom_text(aes(x=Age, y=Edu, colour=Treat, label=GenderName))
fat.cats.df <- read.csv("./11.1/fat_cats_test_set.csv")
true.outcome <- fat.cats.df$height / 10 + fat.cats.df$length / 10 + 2 * fat.cats.df$genetics - 1.5 * (fat.cats.df$treatment * fat.cats.df$gender + 2 * fat.cats.df$treatment * (1 - fat.cats.df$gender))
errors <- fat.cats.df$outcome - true.outcome
rss <- sum(errors ^ 2)
rse <- (rss / nrow(fat.cats.df)) ^ 0.5
tss <- sum((fat.cats.df$outcome - mean(fat.cats.df$outcome))^2)
r.squared <- 1 - rss/tss
View(colette.df)
colette.model <- glm(Edu~Age + Gender + Treat, data=colette.df, family='linear')
?glm
colette.model <- lm(Edu~Age + Gender + Treat, data=colette.df)
summary(colette.model)
View(fat.cats)
fat.cats.df <- read.csv("./11.1/fat_cats_test_set.csv")
View(fat.cats)
View(fat.cats.df)
model = lm(outcome~height + length + genetics + gender + treatment + gender * treatment ,data=fat.cats.df)
summary(model)
model = lm(outcome~height + length + genetics + gender + treatment, data=fat.cats.df)
summary(model)
fat.cats.df <- read.csv("./11.1/fat_cats_test_set.csv")
model = lm(outcome~height + length + genetics + gender + treatment
+ height * length, gender * genetics, gender * treatment, data=fat.cats.df)
summary(model)
fat.cats.df <- read.csv("./11.1/fat_cats_test_set.csv")
model = lm(outcome~height + length + genetics + gender + treatment +
height * length, gender * genetics, gender * treatment, data=fat.cats.df)
summary(model)
model = lm(outcome~height + length + genetics + gender + treatment +
height * length + gender * genetics + gender * treatment, data=fat.cats.df)
summary(model)
fat.cats$black = fat.cats.df$color == 'Black'
fat.cats.df$black = fat.cats.df$color == 'Black'
fat.cats.df$albino = fat.cats.df$color == 'Albino'
fat.cats.df$black = fat.cats.df$color == 'Black'
fat.cats.df$gray = fat.cats.df$color == 'Gray'
fat.cats.df$ginger = fat.cats.df$color == 'Ginger'
fat.cats.df$albino = fat.cats.df$color == 'Albino'
model = lm(outcome~height + length + genetics + gender + treatment +
height * length + gender * genetics + gender * treatment +
black + gray + ginger + albino, data=fat.cats.df)
summary(model)
library(WhatIf)
setwd('./un_policy/')
peace.df <- read.dta('./replication_data/peace.dta')
minimal.cols <- c("decade", "wardur", "wartype", "un2int", "nouncint", "peaceop",
"interven", "major", "gdpcap", "area",
"factnum", "factnum2", "logcost", "trnsfcap",
"develop", "exp", "treaty", "pbs2s3")
peace.df.minimal.raw <- peace.df[,minimal.cols]
peace.df.minimal.raw <- na.omit(peace.df.minimal.raw)
whatif.with.itself <- function(data) {
which(summary(whatif(data=data, cfact=data))$sum.df$in.hull == FALSE)
}
results <- data.frame(i=numeric(1), out=character(1), stringsAsFactors = FALSE)
for (i in c(20, 40, 60, 80, 100, 119)) {
out <- paste(whatif.with.itself(peace.df.minimal.raw[1:i,]), collapse = ', ')
results <- rbind(results, c(i, out))
}
results
library(foreign)
library(WhatIf)
setwd('./un_policy/')
peace.df <- read.dta('./replication_data/peace.dta')
minimal.cols <- c("decade", "wardur", "wartype", "un2int", "nouncint", "peaceop",
"interven", "major", "gdpcap", "area",
"factnum", "factnum2", "logcost", "trnsfcap",
"develop", "exp", "treaty", "pbs2s3")
peace.df.minimal.raw <- peace.df[,minimal.cols]
peace.df.minimal.raw <- na.omit(peace.df.minimal.raw)
whatif.with.itself <- function(data) {
which(summary(whatif(data=data, cfact=data))$sum.df$in.hull == FALSE)
}
results <- data.frame(i=numeric(1), out=character(1), stringsAsFactors = FALSE)
for (i in c(20, 40, 60, 80, 100, 119)) {
out <- paste(whatif.with.itself(peace.df.minimal.raw[1:i,]), collapse = ', ')
results <- rbind(results, c(i, out))
}
results
results <- data.frame(i=numeric(1), out=character(1), stringsAsFactors = FALSE)
for (i in c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 119)) {
out <- paste(whatif.with.itself(peace.df.minimal.raw[1:i,]), collapse = ', ')
results <- rbind(results, c(i, out))
}
results
seq(10, 110, 10)
nrow(results) * 10
nrow(peace.df.minimal.raw)
nrow(peace.df.minimal.raw) % 10
nrow(peace.df.minimal.raw) %% 10
results <- data.frame(i=numeric(1), out=character(1), stringsAsFactors = FALSE)
for (i in c(seq(10, rows - rows %% 10, 10), rows)) { # c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 119)
out <- paste(whatif.with.itself(peace.df.minimal.raw[1:i,]), collapse = ', ')
results <- rbind(results, c(i, out))
}
results
rows <- nrow(peace.df.minimal.raw)
results <- data.frame(i=numeric(1), out=character(1), stringsAsFactors = FALSE)
for (i in c(seq(10, rows - rows %% 10, 10), rows)) { # c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 119)
out <- paste(whatif.with.itself(peace.df.minimal.raw[1:i,]), collapse = ', ')
results <- rbind(results, c(i, out))
}
results
titanic.train <- read.csv("train.csv")
titanic.train <- read.csv("./14.1/train.csv")
setwd('~/projects/r/14.1/')
titanic.train <- read.csv("train.csv")
titanic.test <- read.csv("test.csv")
str(titanic.train)
str(titanic.train)
titanic.train$Child <- 0
titanic.train$Child[train$Age < 18] <- 1
titanic.train$Child[titanic.train$Age < 18] <- 1
titanic.combined <- rbind(titanic.train, titanic.test)
titanic.test$Survived <- 0
str(titanic.test)
titanic.test$Cabin[titanic.test$Age < 18] <- 1
library(foreign)
setwd('~/projects/r/14.1/')
titanic.train <- read.csv("train.csv")
str(titanic.train)
titanic.test <- read.csv("test.csv")
titanic.test$Survived <- 0
str(titanic.test)
titanic.train$Child <- 0
titanic.train$Child[titanic.train$Age < 18] <- 1
titanic.test$Child <- 0
titanic.test$Child[titanic.test$Age < 18] <- 1
titanic.combined <- rbind(titanic.train, titanic.test)
titanic.combined$Name <- as.character(titanic.combined$Name)
titanic.combined$Title <- sapply(titanic.combined$Name,
FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
titanic.combined$Title <- sub(' ', '', titanic.combined$Title)
titanic.combinedi$Title[titanic.combined$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
titanic.combined$Title[titanic.combined$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
titanic.combined$Title[titanic.combined$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
titanic.combined$Title[titanic.combined$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
library(foreign)
setwd('~/projects/r/14.1/')
titanic.train <- read.csv("train.csv")
str(titanic.train)
titanic.test <- read.csv("test.csv")
titanic.test$Survived <- 0
str(titanic.test)
titanic.train$Child <- 0
titanic.train$Child[titanic.train$Age < 18] <- 1
titanic.test$Child <- 0
titanic.test$Child[titanic.test$Age < 18] <- 1
# Feature engineering
titanic.combined <- rbind(titanic.train, titanic.test)
titanic.combined$Name <- as.character(titanic.combined$Name)
titanic.combined$Title <- sapply(titanic.combined$Name,
FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
titanic.combined$Title <- sub(' ', '', titanic.combined$Title)
titanic.combined$Title[titanic.combined$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
titanic.combined$Title[titanic.combined$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Jonkheer')] <- 'Sir'
titanic.combined$Title[titanic.combined$Title %in% c('Dona', 'Lady', 'the Countess')] <- 'Lady'
titanic.combined$Title <- as.factor(titanic.combined$Title)
titanic.combined$FamilySize <- titanic.combined$SibSp + titanic.combined$Parch + 1
combined.train <- titanic.combined[1:nrow(titanic.train)]
combined.train <- titanic.combined[1:nrow(titanic.train),]
combined.test <- titanic.combined[(nrow(titanic.train) + 1):nrow(titanic.combined),]
library(caret)
set.seed(33)
control <- trainControl(method="repeatedcv", number=10, repeats=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
caret.rf <- train(Survived ~ . - Survived, data=combined.train, method="rf",
trControl = minimal.control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
plot(caret.rf)
importance(caret.rf$finalModel, type=2)
test.classes <- predict(caret.rf, newdata = combined.test)
source('~/projects/r/14.1/titanic.R', echo=TRUE)
set.seed(33)
control <- trainControl(method="repeatedcv", number=10, repeats=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
caret.rf <- train(Survived ~ . - Survived, data=combined.train, method="rf",
trControl = minimal.control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
View(combined.train)
control <- trainControl(method="repeatedcv", number=10, repeats=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
caret.rf <- train(Survived ~ . - Survived, data=na.omit(combined.train), method="rf",
trControl = control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
titanic.combined$Survived <- as.factor(titanic.combined$Survived)
combined.train <- titanic.combined[1:nrow(titanic.train),]
combined.test <- titanic.combined[(nrow(titanic.train) + 1):nrow(titanic.combined),]
set.seed(33)
control <- trainControl(method="repeatedcv", number=10, repeats=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
caret.rf <- train(Survived ~ . - Survived, data=na.omit(combined.train), method="rf",
trControl = control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
titanic.combined$Survived <- as.factor(ifelse(titanic.combined$Survived == 1, 'Yes', 'No')
titanic.combined$Survived <- as.factor(ifelse(titanic.combined$Survived == 1, 'Yes', 'No'))
library(foreign)
library(caret)
setwd('~/projects/r/14.1/')
titanic.train <- read.csv("train.csv")
str(titanic.train)
titanic.test <- read.csv("test.csv")
titanic.test$Survived <- 0
str(titanic.test)
titanic.train$Child <- 0
titanic.train$Child[titanic.train$Age < 18] <- 1
titanic.test$Child <- 0
titanic.test$Child[titanic.test$Age < 18] <- 1
# Feature engineering
titanic.combined <- rbind(titanic.train, titanic.test)
titanic.combined$Name <- as.character(titanic.combined$Name)
titanic.combined$Title <- sapply(titanic.combined$Name,
FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
titanic.combined$Title <- sub(' ', '', titanic.combined$Title)
titanic.combined$Title[titanic.combined$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
titanic.combined$Title[titanic.combined$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Jonkheer')] <- 'Sir'
titanic.combined$Title[titanic.combined$Title %in% c('Dona', 'Lady', 'the Countess')] <- 'Lady'
titanic.combined$Title <- as.factor(titanic.combined$Title)
titanic.combined$FamilySize <- titanic.combined$SibSp + titanic.combined$Parch + 1
titanic.combined$Survived <- as.factor(ifelse(titanic.combined$Survived == 1, 'Yes', 'No'))
combined.train <- titanic.combined[1:nrow(titanic.train),]
combined.test <- titanic.combined[(nrow(titanic.train) + 1):nrow(titanic.combined),]
set.seed(33)
control <- trainControl(method="repeatedcv", number=10, repeats=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
caret.rf <- train(Survived ~ . - Survived, data=na.omit(combined.train), method="rf",
trControl = control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
set.seed(33)
control <- trainControl(method="repeatedcv", number=10, repeats=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
caret.rf <- train(Survived ~ . - Survived - Name, data=na.omit(combined.train), method="rf",
trControl = control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
View(combined.test)
set.seed(33)
control <- trainControl(method="repeatedcv", number=10, repeats=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
caret.rf <- train(Survived ~ . - Survived - Name - Ticket, data=na.omit(combined.train), method="rf",
trControl = control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
set.seed(33)
control <- trainControl(method="repeatedcv", number=10, repeats=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
caret.rf <- train(Survived ~ . - Survived - Name - Ticket - Cabin, data=na.omit(combined.train), method="rf",
trControl = control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
plot(caret.rf)
importance(caret.rf$finalModel, type=2)
library(foreign)
library(MASS)
library(caret)
library(WhatIf)
library(reshape)
library(foreach)
setwd('~/projects/r/un_policy/')
seed <- 33
set.seed(seed)
peace.df <- read.dta('./replication_data/peace.dta')
minimal.cols <- c("decade", "wardur", "wartype", "un2int", "nouncint", "peaceop",
"interven", "major", "gdpcap", "area",
"factnum", "factnum2", "logcost", "trnsfcap",
"develop", "exp", "treaty", "pbs2s3")
peace.df.minimal.raw <- peace.df[,minimal.cols]
peace.df.minimal.raw <- na.omit(peace.df.minimal.raw)
peace.df.minimal <- peace.df.minimal.raw
peace.df.minimal$pbs2s3 <- factor(peace.df.minimal$pbs2s3, labels=make.names(c(0, 1)))
# Split the data into training and test sets
set.seed(seed)
train.indices <- createDataPartition(y=peace.df.minimal$pbs2s3,
p=0.66,
list=FALSE)
minimal.train <- peace.df.minimal[train.indices,]
minimal.test <- peace.df.minimal[-train.indices,]
minimal.raw.train <- peace.df.minimal.raw[train.indices,]
minimal.raw.test <- peace.df.minimal.raw[-train.indices,]
library(plyr)
minimal.train[,-'pbs2s3']
minimal.train[,-c('pbs2s3')]
minimal.train[,-ncol(minimal.train)]
minimal.train
minimal.pca.train <- prcomp(minimal.train[,-ncol(minimal.train)], center = TRUE, scale = TRUE)
View(minimal.pca.train)
summary(minimal.pca.train)
summary(minimal.pca.train$x)
minimal.pca.train.x <- cbind(minimal.pca.train$x, minimal.train$pbs2s3)
minimal.pca.test <- prcomp(minimal.test[,-ncol(minimal.test)], center = TRUE, scale = TRUE)
minimal.pca.test.x <- cbind(minimal.pca.test$x, minimal.test$pbs2s3)
pca.control <- trainControl(method="repeatedcv", number=10, repeats=3,
summaryFunction = twoClassSummary, classProbs = TRUE)
pca.rf <- train(pbs2s3 ~ ., data=minimal.pca.train.x, method="rf",
trControl = pca.control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
View(minimal.pca.train.x)
names(minimal.pca.train.x)
pca.rf <- train(V18 ~ ., data=minimal.pca.train.x, method="rf",
trControl = pca.control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
sapply(class, minimal.pca.train.x)
sapply(minimal.pca.train.x, class)
minimal.pca.train.x <- as.data.frame(minimal.pca.train$x)
minimal.pca.train.x <- cbind(minimal.pca.train$x, minimal.train$pbs2s3)
minimal.pca.test.x <- as.data.frame(minimal.pca.test$x)
minimal.pca.test.x <- cbind(minimal.pca.test.x, minimal.test$pbs2s3)
pca.rf <- train(pbs2s3 ~ ., data=minimal.pca.train.x, method="rf",
trControl = pca.control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
pca.rf <- train(V18 ~ ., data=minimal.pca.train.x, method="rf",
trControl = pca.control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
class(minimal.pca.train.x)
minimal.pca.test.x <- as.data.frame(cbind(minimal.pca.test.x, minimal.test$pbs2s3))
minimal.pca.train.x <- as.data.frame(cbind(minimal.pca.train$x, minimal.test$pbs2s3))
minimal.pca.train.x <- as.data.frame(cbind(minimal.pca.train$x, minimal.train$pbs2s3))
minimal.pca.test.x <- as.data.frame(cbind(minimal.pca.test$x, minimal.test$pbs2s3))
minimal.pca.train.x
minimal.pca.train.x <- data.frame(minimal.pca.train$x, pbs2s3 = minimal.train$pbs2s3)
View(minimal.pca.train.x)
minimal.pca.test.x <- data.frame(minimal.pca.test$x, pbs2s3 = minimal.test$pbs2s3)
pca.rf <- train(pbs2s3 ~ ., data=minimal.pca.train.x, method="rf",
trControl = pca.control, preProcess = c('center', 'scale'),
metric = "ROC", verbose = TRUE)
plot(pca.rf)
importance(minimal.caret.rf$finalModel, type=2)
importance(pca$finalModel, type=2)
importance(pca.rf$finalModel, type=2)
pca.rf.test.classes <- predict(pca.rf, newdata = minimal.pca.test.x)
confusionMatrix(data=pca.rf.test.classes, minimal.pca.test.x$pbs2s3, positive = 'X1')
library(foreign)
library(WhatIf)
setwd('./un_policy/')
peace.df <- read.dta('./replication_data/peace.dta')
# Take only a selected subset of the original data set
minimal.cols <- c("decade", "wardur", "wartype", "un2int", "nouncint", "peaceop",
"interven", "major", "gdpcap", "area",
"factnum", "factnum2", "logcost", "trnsfcap",
"develop", "exp", "treaty", "pbs2s3")
peace.df.minimal.raw <- peace.df[,minimal.cols]
peace.df.minimal.raw <- na.omit(peace.df.minimal.raw)
rows <- nrow(peace.df.minimal.raw)
# This function runs a whatif convex hull test on a subset of the data with itself
# and returns the indices of rows that are not in the convex hull
whatif.with.itself <- function(data) {
which(summary(whatif(data=data, cfact=data))$sum.df$in.hull == FALSE)
}
results <- data.frame(i=numeric(1), outside.hull=numeric(1), stringsAsFactors = FALSE)
for (i in c(seq(10, rows - rows %% 10, 10), rows)) {
res <- whatif.with.itself(peace.df.minimal.raw[1:i,])
paste('Outside of hull in first ', i, 'rows: ', paste(res, collapse = ', '))
results <- rbind(results, c(i, length(res)))
}
results
library(foreign)
library(WhatIf)
setwd('./un_policy/')
peace.df <- read.dta('./replication_data/peace.dta')
# Take only a selected subset of the original data set
minimal.cols <- c("decade", "wardur", "wartype", "un2int", "nouncint", "peaceop",
"interven", "major", "gdpcap", "area",
"factnum", "factnum2", "logcost", "trnsfcap",
"develop", "exp", "treaty", "pbs2s3")
peace.df.minimal.raw <- peace.df[,minimal.cols]
peace.df.minimal.raw <- na.omit(peace.df.minimal.raw)
rows <- nrow(peace.df.minimal.raw)
# This function runs a whatif convex hull test on a subset of the data with itself
# and returns the indices of rows that are not in the convex hull
whatif.with.itself <- function(data) {
which(summary(whatif(data=data, cfact=data))$sum.df$in.hull == FALSE)
}
results <- data.frame(i=numeric(1), outside.hull=numeric(1), stringsAsFactors = FALSE)
for (i in c(seq(10, rows - rows %% 10, 10), rows)) {
res <- whatif.with.itself(peace.df.minimal.raw[1:i,])
print(paste('Outside of hull in first ', i, 'rows: ', paste(res, collapse = ', ')))
results <- rbind(results, c(i, length(res)))
}
results
library(foreign)
library(WhatIf)
setwd('./un_policy/')
peace.df <- read.dta('./replication_data/peace.dta')
# Take only a selected subset of the original data set
minimal.cols <- c("decade", "wardur", "wartype", "un2int", "nouncint", "peaceop",
"interven", "major", "gdpcap", "area",
"factnum", "factnum2", "logcost", "trnsfcap",
"develop", "exp", "treaty", "pbs2s3")
peace.df.minimal.raw <- peace.df[,minimal.cols]
peace.df.minimal.raw <- na.omit(peace.df.minimal.raw)
rows <- nrow(peace.df.minimal.raw)
# This function runs a whatif convex hull test on a subset of the data with itself
# and returns the indices of rows that are not in the convex hull
whatif.with.itself <- function(data) {
which(summary(whatif(data=data, cfact=data))$sum.df$in.hull == FALSE)
}
results <- data.frame(i=numeric(1), outside.hull=numeric(1), stringsAsFactors = FALSE)
for (i in c(seq(10, rows - rows %% 10, 10), rows)) {
res <- whatif.with.itself(peace.df.minimal.raw[1:i,])
print(paste('Outside of hull in first', i, 'rows:', paste(res, collapse = ', ')))
results <- rbind(results, c(i, length(res)))
}
results
?whatif
